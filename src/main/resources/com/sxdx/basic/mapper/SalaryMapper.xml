<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sxdx.basic.mapper.SalaryMapper">
  <resultMap id="BaseResultMap" type="com.sxdx.basic.bean.Salary">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="basicSalary" jdbcType="REAL" property="basicsalary" />
    <result column="extraSalary" jdbcType="REAL" property="extrasalary" />
    <result column="absenteeismSalary" jdbcType="REAL" property="absenteeismsalary" />
    <result column="performanceBonus" jdbcType="REAL" property="performancebonus" />
    <result column="otherBonus" jdbcType="REAL" property="otherbonus" />
    <result column="payoffTime" jdbcType="TIMESTAMP" property="payofftime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, basicSalary, extraSalary, absenteeismSalary, performanceBonus, otherBonus, payoffTime
  </sql>
  <select id="selectByExample" parameterType="com.sxdx.basic.bean.SalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from salary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sxdx.basic.bean.SalaryExample">
    delete from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sxdx.basic.bean.Salary">
    insert into salary (id, basicSalary, extraSalary, 
      absenteeismSalary, performanceBonus, otherBonus, 
      payoffTime)
    values (#{id,jdbcType=INTEGER}, #{basicsalary,jdbcType=REAL}, #{extrasalary,jdbcType=REAL}, 
      #{absenteeismsalary,jdbcType=REAL}, #{performancebonus,jdbcType=REAL}, #{otherbonus,jdbcType=REAL}, 
      #{payofftime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.sxdx.basic.bean.Salary">
    insert into salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="basicsalary != null">
        basicSalary,
      </if>
      <if test="extrasalary != null">
        extraSalary,
      </if>
      <if test="absenteeismsalary != null">
        absenteeismSalary,
      </if>
      <if test="performancebonus != null">
        performanceBonus,
      </if>
      <if test="otherbonus != null">
        otherBonus,
      </if>
      <if test="payofftime != null">
        payoffTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="basicsalary != null">
        #{basicsalary,jdbcType=REAL},
      </if>
      <if test="extrasalary != null">
        #{extrasalary,jdbcType=REAL},
      </if>
      <if test="absenteeismsalary != null">
        #{absenteeismsalary,jdbcType=REAL},
      </if>
      <if test="performancebonus != null">
        #{performancebonus,jdbcType=REAL},
      </if>
      <if test="otherbonus != null">
        #{otherbonus,jdbcType=REAL},
      </if>
      <if test="payofftime != null">
        #{payofftime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sxdx.basic.bean.SalaryExample" resultType="java.lang.Long">
    select count(*) from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update salary
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.basicsalary != null">
        basicSalary = #{record.basicsalary,jdbcType=REAL},
      </if>
      <if test="record.extrasalary != null">
        extraSalary = #{record.extrasalary,jdbcType=REAL},
      </if>
      <if test="record.absenteeismsalary != null">
        absenteeismSalary = #{record.absenteeismsalary,jdbcType=REAL},
      </if>
      <if test="record.performancebonus != null">
        performanceBonus = #{record.performancebonus,jdbcType=REAL},
      </if>
      <if test="record.otherbonus != null">
        otherBonus = #{record.otherbonus,jdbcType=REAL},
      </if>
      <if test="record.payofftime != null">
        payoffTime = #{record.payofftime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update salary
    set id = #{record.id,jdbcType=INTEGER},
      basicSalary = #{record.basicsalary,jdbcType=REAL},
      extraSalary = #{record.extrasalary,jdbcType=REAL},
      absenteeismSalary = #{record.absenteeismsalary,jdbcType=REAL},
      performanceBonus = #{record.performancebonus,jdbcType=REAL},
      otherBonus = #{record.otherbonus,jdbcType=REAL},
      payoffTime = #{record.payofftime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sxdx.basic.bean.Salary">
    update salary
    <set>
      <if test="basicsalary != null">
        basicSalary = #{basicsalary,jdbcType=REAL},
      </if>
      <if test="extrasalary != null">
        extraSalary = #{extrasalary,jdbcType=REAL},
      </if>
      <if test="absenteeismsalary != null">
        absenteeismSalary = #{absenteeismsalary,jdbcType=REAL},
      </if>
      <if test="performancebonus != null">
        performanceBonus = #{performancebonus,jdbcType=REAL},
      </if>
      <if test="otherbonus != null">
        otherBonus = #{otherbonus,jdbcType=REAL},
      </if>
      <if test="payofftime != null">
        payoffTime = #{payofftime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sxdx.basic.bean.Salary">
    update salary
    set basicSalary = #{basicsalary,jdbcType=REAL},
      extraSalary = #{extrasalary,jdbcType=REAL},
      absenteeismSalary = #{absenteeismsalary,jdbcType=REAL},
      performanceBonus = #{performancebonus,jdbcType=REAL},
      otherBonus = #{otherbonus,jdbcType=REAL},
      payoffTime = #{payofftime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>